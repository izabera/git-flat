#!/bin/bash -e

# simple tool to search git history
# *way* faster than   git log -S'string'
#
# it just flattens the entire branch you're on as a huge patch file and runs grep on it
# grep is fast, git log is super inefficient


cd "$(git rev-parse --show-toplevel)"

case $1 in
  # run `git flat init` the first time (this takes a while but it's only executed once)
  init)
    mkdir -p .git/flat
    : > .git/flat/settings
    ;&

  # run `git flat pull` after each git pull
  pull)
    { last=$(< .git/flat/lastcommit); } 2>/dev/null
    git log --patch --reverse ${last+"$last.."} >>.git/flat/patch
    grep -n '^commit ' .git/flat/patch | cut -d: -f1 > .git/flat/commits
    git rev-parse HEAD > .git/flat/lastcommit
    ;;


  # to set variables used by git flat, currently it only cares about $context and $case
  set)
    shift
    echo "$@" >> .git/flat/settings
    ;;


  # main functionality
  search)
    [[ -r .git/flat/settings ]] && source .git/flat/settings

    # try some "smart casing": case insensitive if we have no uppercase letters
    [[ $2 != *[[:upper:]]* ]] && case=${case-i}

    mapfile -t offsets < .git/flat/commits
    offsets+=(10000000000000)
    i=0
    IFS=:
    grep "-na$case" -- "$2" .git/flat/patch |
    while read -r num _; do
      : num="$num" i="$i"
      while (( offsets[i+1] <= num )); do
        (( ++i ))
      done
      if (( ! printed[offsets[i]] ++ )); then
        echo "${offsets[i]},$((offsets[i+1]-1))p"
      fi
    done |
    sed -nf /dev/stdin .git/flat/patch |
    if [[ -t 1 ]]; then
      colordiff |
      less -R +/"$2"
    else
      cat
    fi
    ;;


  # to get rid of the large file we generated
  clean)
    rm -rf .git/flat ;;

  *) echo "unknown command '$1'"
esac
